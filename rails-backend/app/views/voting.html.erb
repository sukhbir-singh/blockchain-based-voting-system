<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>Blockchain Voting App</title>
  <link rel='stylesheet prefetch' href='https://fonts.googleapis.com/css?family=Open+Sans:400,700,300,600'>
  <link rel="stylesheet" href="css/style.css">
  <link rel="stylesheet" href="css/voting.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/sha1.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/sha1.js"></script>
  <script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@develop/dist/web3.js"></script>
  <script src="js/blockchain.js"></script>
  
  <script type="text/javascript">

  web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
json_string='[{"constant":false,"inputs":[{"name":"_user_id","type":"string"},{"name":"_encryption_key_hash","type":"string"}],"name":"addUser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_user_id","type":"string"},{"name":"_hash","type":"string"}],"name":"storeHash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_user_id","type":"string"},{"name":"_link","type":"string"}],"name":"storeLink","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"totalUsers","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_user_id","type":"string"},{"name":"_encryption_key_hash","type":"string"}],"name":"retrieveLink","outputs":[{"name":"","type":"string"},{"name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_user_id","type":"string"},{"name":"_encryption_key_hash","type":"string"}],"name":"_isValid","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]';

abi = JSON.parse(json_string);
VotingContract = web3.eth.contract(abi)
var contractInstance = VotingContract.at(getDeployedAddress());

// block chain work above this line

var user_inc_id="<%= @user.inc_id.to_s %>";

function get_last_voted_link(){
  var encryption_key_hash="<%= @user.encryption_key.to_s %>";

  var array = contractInstance.retrieveLink.call(user_inc_id, encryption_key_hash);
  var dt = CryptoJS.AES.decrypt(array[0], encryption_key_hash);
  generated_id = dt.toString(CryptoJS.enc.Utf8);
  return generated_id;
}

//main vote functionality

function voteButton(e){
  var old_generated_id = get_last_voted_link();

  encryption_key = prompt("Enter your Encryption Key");

  if(encryption_key.length!=0){
      var hash = CryptoJS.SHA1(encryption_key);
      encryption_key_hash = CryptoJS.enc.Hex.stringify(hash);
      
      $.post('/vote', {encryption_key: encryption_key_hash, leader_id: e.id}, function(response) {
        console.log(response);

        // if success: true put (user_inc_id, hash, encrypted_generated_id) in blockchain
        
        if(response.success == true){
          console.log("response is true" + response.data.link +" "+ encryption_key);

          encrypted_data_link = CryptoJS.AES.encrypt(response.data.link, encryption_key_hash)+"";
          // encrypted_data_hash = CryptoJS.AES.encrypt(response.data.hash, encryption_key)+"";

          // trick a bit complex
          inc_id_hash = CryptoJS.AES.encrypt( user_inc_id, encryption_key_hash )+"";
          hashed_hash = CryptoJS.SHA1(inc_id_hash+response.data.hash)+"";

          contractInstance.storeLink(user_inc_id, encrypted_data_link+"", {from: web3.eth.accounts[0]}, function(result){
            console.log("Link Saved in Blockchain: "+encrypted_data_link);
            
            contractInstance.storeHash(user_inc_id, hashed_hash+"", {from: web3.eth.accounts[0]}, function(result){
              console.log("Hash Saved in Blockchain: "+hashed_hash);

                console.log("Both link and hash saved in blockchain, now update in to database");   

                // update vote status
                $.post('/update_vote_status', {is_valid: true, generated_id: response.data.link,
                  old_generated_id: old_generated_id
                }, function(response){
                  console.log("update status response: ");
                  console.log(response);

                  // just for testing and happiness << decrypting for dashboard >>
                  var array = contractInstance.retrieveLink.call(user_inc_id, encryption_key_hash);
                  var dt = CryptoJS.AES.decrypt(array[0], encryption_key_hash);
                  dt.toString(CryptoJS.enc.Utf8);

                  console.log("generated_id is: "+dt.toString(CryptoJS.enc.Utf8));
                  window.open("/","_self");
                });       
            })
          })

        }else{
          alert('Invalid encryption key !!');
          console.log("response is false");
        }

    });
  }

  /*
    Decrypting Link for Last Vote:- 
    var aa=CryptoJS.AES.decrypt("U2FsdGVkX1/8SSqo4OMw1kmbmBT3sjGZMANpmtulvRd9LuBz+Z6yE221v2j5ap+j","445566");
    aa.toString(CryptoJS.enc.Utf8);  // "QbVD47e7bL3BYo+EnvaNoQ=="

  */


}

 </script>
</head>
<body>
  <div class="cont_principal_vote">
  <div class="cont_centrar_vote" style="background: #ead1ec">  	
    <div class="leaders_div">

    <% @leaders.each do |leader|%>

      <div class="card">
        <% if leader.sex == "male"%>
          <%=image_tag "male.jpg", :class =>"profile_icon" %> 
        <% else %>
          <%=image_tag "female.jpg", :class =>"profile_icon" %> 
        <% end %>        

        <h1 style="max-height: 40px; font-size: 25px; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;"><%=leader[:name]%></h1>
        <p><%=leader.party%></p>
        <p class="title"><%=leader.area.upcase%></p>
        <p><button class="vote_btn" id="<%= leader.id.to_s %>" onclick="voteButton(this)">Vote</button></p>
     </div>

    <% end %>

      <div class="clear"></div>
    </div>
      </div>    
  </div>
  </div>
</body>
</html>
